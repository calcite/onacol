general:
    # Python logging level for this application.
    log_level:
        oc_default: INFO
        oc_schema:
            type: string

# Definitions for the CAN interface
can_bus:
    # CAN settings for the sensor network CAN
    sensor_can:
        channel:            # Channel id on the CAN interface ('can0', 'can1)
            oc_default: can0
            oc_schema:
                type: string

        bus_type:           # Bus type (default: 'socketcan')
            oc_default: socketcan
            oc_schema:
                type: string

        oc_schema_id: can_bus_def
        oc_schema:
            allow_unknown: false
    vehicle_can:
        channel: "can1"
        bus_type: "socketcan"
        oc_schema: can_bus_def

sensor_config:
    # List of sensors
    sensors:
        - id:                   # Sensor ID <0, 16>
            oc_default: 0
            oc_schema:
                type: integer
          name:                  # Sensor description
            oc_default: "The first sensor"
            oc_schema:
                type: string
          min_trigger_limit:  # Minimal trigger limit [cm]
            oc_default: 70
            oc_schema:
                type: integer
          max_trigger_limit:  # Maximal trigger limit [cm]
              oc_default: 120
              oc_schema:
                  type: integer
        - id: 1
          name: "The other sensor."
          min_trigger_limit: 30
          max_trigger_limit: 120
        - id: 2
          name: "One more sensor."
          min_trigger_limit: 30
          max_trigger_limit: 110

    sensor_configurations:
        - name:
            oc_default: "1 sensor"
            oc_schema:
                type: string
          sensors:
            oc_default: [0, ]
            oc_schema:
                type: list
                schema:
                    type: integer

        - name: "1 sensor (next)"
          sensors: [1, ]
        - name: "1 sensor (the other)"
          sensors: [2, ]
        - name: "2 sensor (first and the other)"
          sensors: [0, 2]
        - name: "2 sensor (next and the other)"
          sensors: [1, 2]
        - name: "2 sensor (first and next)"
          sensors: [0, 1]
        - name: "3 sensor"
          sensors: [0, 1, 2]

    default_configuration: "3 sensor"
    default_control_mode: "sensor"

control_config:
    # Resume interval in seconds
    resume_interval: 3.0
    # Resume guard interval in seconds
    resume_guard_interval: 3.0
    # Resume clearence interval in seconds
    resume_clearance_interval: 1.0
    # CAN transmit enabled
    can_transmit: true
    # Sensor reset interval in seconds. set to -1 to disable.
    sensor_reset_interval:
        oc_default: 30
        oc_schema:
            type: integer

bottom_sensor:
    # Whether bottom sensor featuer is enabled for operation
    feature_enabled: true
    # Whether the bottom sensor functionality is enabled
    # (serves as default for UI)
    state_enabled: true
    # (If set to false, sensor is active all the time.)
    preactivate_on_conrtol_activity: true
    # (If set to false, the pre-activation will be done on all sensors.)
    preactivate_on_relevant_sensors_only: false
    # Bottom sensor will deactivate after this period, if no control activity
    # [seconds]
    preactivation_timeout:
        oc_default: 5
        oc_schema:
            type: integer
            max: 10
            min: 0

    # Bottom sensor UART
    uart:
        device: "/dev/ttyS0"
        baud_rate: 115200

ui:
    # Address to which the UI HTTP server should bind
    addr: 0.0.0.0

    # Port to on which the UI HTTP server should bind
    port: 8888

    # Master controller address in case this controller is part of a
    # Mutaprops UI cluster.
    master_addr: null

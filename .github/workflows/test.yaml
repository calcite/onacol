name: Build

on:
  push:
  pull_request:
    types: [opened, synchronize]
  release:
    types: [created]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get full python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Install poetry
        uses: Gr1N/setup-poetry@v7
      - name: Configure poetry
        run: poetry config virtualenvs.in-project true
      - name: Set up cache
        uses: actions/cache@v2
        with:
            path: ~/.cache/pypoetry/virtualenvs
            key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv
      - name: Install Dependencies
        run: poetry install
      - name: MyPy
        run: poetry run mypy tests/test_onacol.py
      - name: Test & Coverage
        run: poetry run coverage run -m unittest
      - name: Upload coverage
        env:
            COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: poetry run coveralls

  publish:
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
            python-version: "3.8"
      - name: Install poetry
        uses: Gr1N/setup-poetry@v7
      - name: Configure poetry
        run: poetry config virtualenvs.in-project true
      - name: Build and publish
        env:
            POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish --build
